#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Aliases
#define XXX &none
#define ___ &trans


// Layer names
#define L_BASE     0
#define L_NAV      1
#define L_NUMPAD   2
#define L_SYMBOLS  3
#define L_FUNCTION 4
#define L_BT_CTRL  5

// Rows
#define RLT    0  1  2  3  4  5
#define RRT    6  7  8  9 10 11
#define RLM   12 13 14 15 16 17
#define RRM   18 19 20 21 22 23
#define RLB   24 25 26 27 28 29
#define RRB   30 31 32 33 34 35
#define RLH   36 37 38
#define RRH   39 40 41

#define LSIDE  RLT RLM RLB RLH
#define RSIDE  RRT RRM RRB RRH



&lt {
    tapping-term-ms = <180>;
    quick-tap-ms = <280>;
};

&sk {
    release-after-ms = <1500>;
    quick-release;
};

/ {
    macros {
        stf: super_tab_fwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_tap &sk LALT>
                , <&macro_release &kp LALT>
                ;
        };

        stb: super_tab_bkw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp LS(TAB)>
                , <&macro_tap &sk LALT>
                , <&macro_release &kp LALT>
                ;

        };

        enpad: enable_numpad_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LNLCK>
                , <&macro_press &mo L_NUMPAD>
                , <&macro_pause_for_release>
                , <&macro_release &mo L_NUMPAD>
                , <&macro_tap &kp LNLCK>
                , <&macro_tap &kp KP_CLEAR>
                ;
        };

        enav: enable_navigation_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo L_NAV>
                , <&macro_pause_for_release>
                , <&macro_release &mo L_NAV>
                , <&macro_tap &kp K_CANCEL> 
                ;
        };
    };

    behaviors {
        pm: pinky_mod {  // Give some more time for the pinky
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lsm: left_shift_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <RSIDE>;
            bindings = <&kp>, <&kp>;
        };

        rsm: right_shift_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <LSIDE>;
            bindings = <&kp>, <&kp>;
        };

        num: enable_numpad_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&enpad>, <&kp>;
        };

        nav: enable_nav_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&enav>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        querty_layer {
// ------------------------------------------------------------------------------------------------------------------------------------
// |   `     |    Q    |    W    |    E    |    R    |    T    |          |    Y    |    U    |    I    |    O    |    P    |    \    |
// |   ESC   | A/LGUI  | S/LALT  | D/LSHFT | F/LCRTL | G/RALT  |          | H/RALT  | J/RCTRL | K/RSHFT | L/LALT  | ;/RGUI  |    '    |
// |  SCAPS  |    Z    |    X    |    C    |    V    |    B    |          |    N    |    M    |    ,    |    .    |    /    |  CTX MN |
//                               |   TAB   |   SPC   |   DEL   |          |  BSPC   |   RET   |  PSCRN  |
            bindings = <
    &kp GRAVE   &kp Q       &kp W       &kp E             &kp R         &kp T                         &kp Y                  &kp U               &kp I                &kp O       &kp P         &kp BSLH
    &kp ESC     &pm LGUI A  &hm LALT S  &lsm LSHIFT D     &hm LCTRL F   &hm RALT G                    &hm RALT H             &hm RCTRL J         &rsm RSHIFT K        &hm LALT L  &pm LGUI SEMI &kp SQT
    &caps_word  &kp Z       &kp X       &kp C             &kp V         &kp B                         &kp N                  &kp M               &kp COMMA            &kp DOT     &kp FSLH      &kp K_APP
//                                        &lt L_NUMPAD TAB  &nav 0 RET  &lt L_SYMBOLS DEL             &lt L_FUNCTION BSPC    &nav 0 SPACE          &lt L_BT_CTRL PSCRN
                                        &lt L_NUMPAD TAB  &nav 0 SPACE  &lt L_SYMBOLS DEL             &lt L_FUNCTION BSPC    &nav 0 RET          &lt L_BT_CTRL PSCRN
            >;
        };

        nav_layer {
// --------------------------------------------------------------------------------------------------------------------------------
// |         |         |         |         |          |        |          |    *     |    7    |    8    |    9    |   -    |    /   |
// |         |         |         |         |          |        |          |    0     |    4    |    5    |    6    |   .    |    ^   |
// |         |         |         |         |          |        |          |    +     |    1    |    2    |    3    |   ,    |    =   |
//                               |         |          |        |          |          |         |         |
            bindings = <
    XXX      &kp PAUSE_BREAK  &stb       &kp LC(LS(TAB))  &kp LC(TAB)  &stf          &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    XXX        &kp F12
    ___      ___               ___       ___              ___          ___           &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  ___        &kp F11
    XXX      &kp LC(Z)        &kp LC(X)  &kp LC(C)        &kp LC(V)    &kp LC(A)     &kp LC(A)  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &kp F10
                                         ___              ___          ___           ___       ___        ___
            >;
        };

        numpad_layer {
// --------------------------------------------------------------------------------------------------------------------------------
// |         |         |         |         |          |        |          |    *     |    7     |     8    |     9     |    =     |    /   |
// |         |         |         |         |          |        |          |    -     |    4     |     5    |     6     |    .     |    ^   |
// |         |         |         |         |          |        |          |    +     |    1     |     2    |     3     |    /     |    ,   |
//                               |         |          |        |          |          |          |          |
            bindings = <
    ___      ___     ___     ___     ___     ___                 &kp ASTRK  &kp N7  &kp N8  &kp N9  &kp EQUAL  &kp SLASH
    ___      ___     ___     ___     ___     ___                 &kp MINUS  &kp N4  &kp N5  &kp N6  &kp DOT    &kp CARET
    ___      ___     ___     ___     ___     ___                 &kp PLUS   &kp N1  &kp N2  &kp N3  &kp SLASH  &kp COMMA
                             ___     ___     ___                 ___        ___     &kp N0
            >;
        };

        symbol_layer {
// --------------------------------------------------------------------------------------------------------------------------------
// |        |   '   |   "   |   <   |   >   |  `  |                |   *    |   {   |   }   |   _   |   =   |   ~   |
// |        |   !   |   -   |   |   |   &   |  #  |                |   -    |   (   |   )   |   :   |   %   |   ;   |
// |        |   ^   |   /   |   *   |   \   |  @  |                |   +    |   [   |   ]   |   $   |   ?   |       |
//                          |       |       |     |                |        |       |       |
            bindings = <
    ___  &kp SQT    &kp DQT    &kp LT    &kp GT     &kp GRAVE        &kp ASTRK  &kp LBRC  &kp RBRC  &kp UNDER   &kp EQUAL     &kp TILDE
    ___  &kp EXCL   &kp MINUS  &kp PIPE  &kp AMPS   &kp HASH         &kp MINUS  &kp LPAR  &kp RPAR  &kp COLON   &kp PERCENT   &kp SEMI
    ___  &kp CARET  &kp SLASH  &kp STAR  &kp BSLH   &kp AT           &kp PLUS   &kp LBKT  &kp RBKT  &kp DOLLAR  &kp QUESTION  ___
                               ___       ___        ___              ___        ___        ___
            >;
        };

        function_layer {
// --------------------------------------------------------------------------------------------------------------------------------
// |        |       |       |       |       |     |      |          |        |       |       |         |         |
// |        |       |       |       |       |     |      |          |        |       |       |         |         |
// |        |       |       |       |       |     |      |          |        |       |       |         |         |
//                          |       |       |     |      |          |        |       |
            bindings = <

    ___      ___     ___     ___     ___     ___        ___  &kp F7  &kp F8  &kp F9  &kp F12  ___
    ___      ___     ___     ___     ___     ___        ___  &kp F4  &kp F5  &kp F6  &kp F11  ___
    ___      ___     ___     ___     ___     ___        ___  &kp F1  &kp F2  &kp F3  &kp F10  ___
                             ___     ___     ___        ___  ___     ___
            >;
        };

        media_bt_ctrl_layer {
// --------------------------------------------------------------------------------------------------------------------------------
//        |        |       |        |          |        |          |  BT1  |  BT2  |  BT3  |  BT4  |  BT5  |  BT CLR ALL  |
//        |  VDWN  |  VUP  |  PREV  |  PL/PAU  |  NEXT  |          |       |       |       |       |       |    BT CLR    |
//        |        |       |        |          |        |          |       |       |       |       |       |              |
//                         |        |          |        |          |       |       |       |
            bindings = <
    XXX   XXX           XXX           XXX         XXX       &bootloader             XXX           XXX           XXX           XXX           XXX           &bt BT_CLR_ALL
    XXX   &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP  &kp C_NEXT              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
    XXX   XXX           XXX           XXX         XXX       XXX                     &out OUT_USB  &out OUT_BLE  XXX           XXX           XXX           XXX
                                      XXX         XXX       XXX                     XXX           XXX           XXX
            >;
        };

//         null_layer {
// // --------------------------------------------------------------------------------------------------------------------------------
// // |        |       |       |       |       |     |      |          |        |       |       |         |         |
// // |        |       |       |       |       |     |      |          |        |       |       |         |         |
// // |        |       |       |       |       |     |      |          |        |       |       |         |         |
// //                          |       |       |     |      |          |        |       |
//             bindings = <
//     ___      ___     ___     ___     ___     ___          ___  ___  ___  ___  ___  ___
//     ___      ___     ___     ___     ___     ___          ___  ___  ___  ___  ___  ___
//     ___      ___     ___     ___     ___     ___          ___  ___  ___  ___  ___  ___
//                             ___  ___  ___        ___  ___  ___
//             >;
//         };

//         opaque_layer {
// // --------------------------------------------------------------------------------------------------------------------------------
// // |        |       |       |       |       |     |      |          |        |       |       |         |         |
// // |        |       |       |       |       |     |      |          |        |       |       |         |         |
// // |        |       |       |       |       |     |      |          |        |       |       |         |         |
// //                          |       |       |     |      |          |        |       |
//             bindings = <
//     XXX  XXX  XXX  XXX  XXX  XXX        XXX  XXX  XXX  XXX  XXX  XXX
//     XXX  XXX  XXX  XXX  XXX  XXX        XXX  XXX  XXX  XXX  XXX  XXX
//     XXX  XXX  XXX  XXX  XXX  XXX        XXX  XXX  XXX  XXX  XXX  XXX
//                          XXX  XXX  XXX        XXX  XXX  XXX
//             >;
//         };

    };
};